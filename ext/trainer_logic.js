// ext/trainer_logic.js - –õ–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ –° –∞–±–∞–∫—É—Å–æ–º
import { ExampleView } from "./components/ExampleView.js";
import { Abacus } from "./components/Abacus.js";
import { generateExample } from "./core/generator.js";
import { startTimer, stopTimer } from "../js/utils/timer.js";
import { playSound } from "../js/utils/sound.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
 * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Object} context - { t, state }
 */
export function mountTrainerUI(container, { t, state }) {
  console.log('üéÆ –ú–æ–Ω—Ç–∏—Ä—É–µ–º UI —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ —Å –∞–±–∞–∫—É—Å–æ–º...');
  console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', state.settings);
  console.log('üîß state.settings.inline =', state.settings.inline);
  
  const digits = parseInt(state.settings.digits, 10) || 1;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const displayMode = state.settings.inline ? 'inline' : 'column';
  
  console.log('üìê –†–ï–ñ–ò–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø:', displayMode);
  console.log('üìê –ö–õ–ê–°–° –ë–£–î–ï–¢:', `mws-trainer--${displayMode}`);
  console.log('üìê –ö–õ–ê–°–° trainer-main –ë–£–î–ï–¢:', `trainer-main--${displayMode}`);
  
  // –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π layout
  const layout = document.createElement("div");
  layout.className = `mws-trainer mws-trainer--${displayMode}`;
  
  layout.innerHTML = `
    <div class="trainer-main trainer-main--${displayMode}">
      <div id="area-example" class="example-view"></div>
      
      <div class="answer-section">
        <div class="answer-label">–û—Ç–≤–µ—Ç:</div>
        <input type="number" id="answer-input" placeholder="" />
        <button class="btn btn--primary" id="btn-submit">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
      </div>
    </div>
    
    <div id="panel-controls">
      <!-- –ö–∞–ø—Å—É–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ò —Å—á–µ—Ç—á–∏–∫–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤ -->
      <div class="results-capsule-extended">
        <div class="results-capsule-extended__header">
          <span class="results-capsule-extended__label">–ü—Ä–∏–º–µ—Ä—ã:</span>
          <span class="results-capsule-extended__counter"><span id="stats-completed">0</span> / <span id="stats-total">${getExampleCount(state.settings)}</span></span>
        </div>
        <div class="results-capsule">
          <div class="results-capsule__side results-capsule__side--correct">
            <div class="results-capsule__icon">‚úì</div>
            <div class="results-capsule__value" id="stats-correct">0</div>
          </div>
          <div class="results-capsule__divider"></div>
          <div class="results-capsule__side results-capsule__side--incorrect">
            <div class="results-capsule__icon">‚úó</div>
            <div class="results-capsule__value" id="stats-incorrect">0</div>
          </div>
        </div>
      </div>
      
      <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä -->
      <div class="progress-container">
        <div class="progress-bar">
          <div class="progress-bar__correct" id="progress-correct" style="width: 0%;"></div>
          <div class="progress-bar__incorrect" id="progress-incorrect" style="width: 0%;"></div>
        </div>
        <div class="progress-label">
          <span class="progress-label__correct">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: <strong id="percent-correct">0%</strong></span>
          <span class="progress-label__incorrect">–û—à–∏–±–∫–∏: <strong id="percent-incorrect">0%</strong></span>
        </div>
      </div>
      
      <!-- –¢–∞–π–º–µ—Ä -->
      <div class="timer-capsule">
        <svg class="timer-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" stroke="currentColor" stroke-width="2"/>
          <path d="M12 6v6l4 2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          <path d="M6 2l3 3M18 2l-3 3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
        <span id="timer">00:00</span>
      </div>
      
      <!-- –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å -->
      <div class="panel-card panel-card--compact">
        <button class="btn btn--secondary btn--fullwidth" id="btn-toggle-abacus">
          üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å
        </button>
      </div>
      
      <!-- –ê–±–∞–∫—É—Å (—Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è) -->
      <div id="abacus-container" class="abacus-container"></div>
    </div>
  `;
  
  container.appendChild(layout);
  
  // –ü–†–û–í–ï–†–ö–ê: –≤—ã–≤–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  setTimeout(() => {
    const trainerMain = container.querySelector('.trainer-main');
    console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ .trainer-main:', trainerMain?.className);
    console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ .mws-trainer:', container.querySelector('.mws-trainer')?.className);
  }, 100);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const exampleView = new ExampleView(document.getElementById('area-example'));
  
  // –°–æ–∑–¥–∞—ë–º –∞–±–∞–∫—É—Å
  const abacusContainer = document.getElementById('abacus-container');
  const abacus = new Abacus(abacusContainer, digits);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∞–±–∞–∫—É—Å–∞
  let abacusVisible = false;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const session = {
    currentExample: null,
    stats: {
      correct: 0,
      incorrect: 0,
      total: getExampleCount(state.settings)
    },
    completed: 0
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä
  function showNextExample() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if (session.completed >= session.stats.total) {
      finishSession();
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
    session.currentExample = generateExample(state.settings);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∞–≥–∏ –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
    exampleView.render(
      session.currentExample.steps,
      displayMode
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–±–∞–∫—É—Å (–Ω–∞—á–∏–Ω–∞–µ–º —Å 0)
    abacus.reset();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const input = document.getElementById('answer-input');
    input.value = '';
    input.focus();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    startTimer('timer');
    
    console.log('üìù –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', session.currentExample.answer);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
  function checkAnswer() {
    const input = document.getElementById('answer-input');
    const userAnswer = parseInt(input.value, 10);
    
    if (isNaN(userAnswer)) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ');
      return;
    }
    
    stopTimer();
    
    const isCorrect = userAnswer === session.currentExample.answer;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (isCorrect) {
      session.stats.correct++;
    } else {
      session.stats.incorrect++;
    }
    session.completed++;
    
    updateStats();
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
    playSound(isCorrect ? 'correct' : 'wrong');
    
    console.log(isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–≤–µ—Ç –±—ã–ª: ' + session.currentExample.answer);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    setTimeout(() => {
      showNextExample();
    }, 500);
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  function updateStats() {
    const { correct, incorrect, total } = session.stats;
    const completed = session.completed;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    document.getElementById('stats-completed').textContent = completed;
    document.getElementById('stats-correct').textContent = correct;
    document.getElementById('stats-incorrect').textContent = incorrect;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const percentCorrect = completed > 0 ? Math.round((correct / completed) * 100) : 0;
    const percentIncorrect = completed > 0 ? Math.round((incorrect / completed) * 100) : 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    document.getElementById('progress-correct').style.width = percentCorrect + '%';
    document.getElementById('progress-incorrect').style.width = percentIncorrect + '%';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
    document.getElementById('percent-correct').textContent = percentCorrect + '%';
    document.getElementById('percent-incorrect').textContent = percentIncorrect + '%';
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  function finishSession() {
    console.log('üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–∏:', session.stats);
    
    // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ Results
    if (window.finishTraining) {
      window.finishTraining({
        correct: session.stats.correct,
        total: session.stats.total
      });
    }
  }
  
  // –¢–æ–≥–≥–ª –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∞–±–∞–∫—É—Å–∞
  function toggleAbacus() {
    abacusVisible = !abacusVisible;
    const btn = document.getElementById('btn-toggle-abacus');
    
    if (abacusVisible) {
      abacusContainer.classList.add('visible');
      btn.textContent = 'üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å';
    } else {
      abacusContainer.classList.remove('visible');
      btn.textContent = 'üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å';
    }
  }
  
  // –°–æ–±—ã—Ç–∏—è
  document.getElementById('btn-submit').addEventListener('click', checkAnswer);
  
  document.getElementById('answer-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      checkAnswer();
    }
  });
  
  document.getElementById('btn-toggle-abacus').addEventListener('click', toggleAbacus);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
  showNextExample();
  
  console.log(`‚úÖ –¢—Ä–µ–Ω–∞–∂—ë—Ä –∑–∞–ø—É—â–µ–Ω —Å –∞–±–∞–∫—É—Å–æ–º (${digits + 1} —Å—Ç–æ–µ–∫)`);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} settings
 * @returns {number}
 */
function getExampleCount(settings) {
  return settings.examples.infinite ? 10 : settings.examples.count;
}
