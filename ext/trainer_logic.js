// ext/trainer_logic.js - –õ–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ü–∏—Ñ—Ä
import { ExampleView } from "./components/ExampleView.js";
import { Abacus } from "./components/AbacusNew.js";
import { generateExample } from "./core/generator.js";
import { startTimer, stopTimer } from "../js/utils/timer.js";
import { playSound } from "../js/utils/sound.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
 * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Object} context - { t, state }
 */
export function mountTrainerUI(container, { t, state }) {
  try {
    console.log("üéÆ –ú–æ–Ω—Ç–∏—Ä—É–µ–º UI —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ —Å –Ω–æ–≤—ã–º SVG –∞–±–∞–∫—É—Å–æ–º...");
    console.log("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", state?.settings);

    // ‚îÄ‚îÄ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const st = state?.settings ?? {};
    const actionsCfg = st.actions ?? {};
    const examplesCfg = st.examples ?? {};
    const blockSimpleDigits = Array.isArray(st?.blocks?.simple?.digits)
      ? st.blocks.simple.digits
      : [];

    const digits = parseInt(st.digits, 10) || 1;
    const abacusDigits = digits + 1;
    const displayMode = st.inline ? "inline" : "column";

    // === Layout ===
    const layout = document.createElement("div");
    layout.className = `mws-trainer mws-trainer--${displayMode}`;
    layout.innerHTML = `
      <div class="trainer-main trainer-main--${displayMode}">
        <div id="area-example" class="example-view"></div>
      </div>
      <div id="panel-controls">
        <div class="answer-section-panel">
          <div class="answer-label">–û—Ç–≤–µ—Ç:</div>
          <input type="number" id="answer-input" placeholder="" />
          <button class="btn btn--primary" id="btn-submit">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
        </div>

        <div class="results-capsule-extended">
          <div class="results-capsule-extended__header">
            <span class="results-capsule-extended__label">–ü—Ä–∏–º–µ—Ä—ã:</span>
            <span class="results-capsule-extended__counter">
              <span id="stats-completed">0</span> /
              <span id="stats-total">${getExampleCount(examplesCfg)}</span>
            </span>
          </div>
          <div class="results-capsule">
            <div class="results-capsule__side results-capsule__side--correct">
              <div class="results-capsule__icon">‚úì</div>
              <div class="results-capsule__value" id="stats-correct">0</div>
            </div>
            <div class="results-capsule__divider"></div>
            <div class="results-capsule__side results-capsule__side--incorrect">
              <div class="results-capsule__icon">‚úó</div>
              <div class="results-capsule__value" id="stats-incorrect">0</div>
            </div>
          </div>
        </div>

        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-bar__correct" id="progress-correct" style="width:0%;"></div>
            <div class="progress-bar__incorrect" id="progress-incorrect" style="width:0%;"></div>
          </div>
          <div class="progress-label">
            <span class="progress-label__correct">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: <strong id="percent-correct">0%</strong></span>
            <span class="progress-label__incorrect">–û—à–∏–±–∫–∏: <strong id="percent-incorrect">0%</strong></span>
          </div>
        </div>

        <div class="timer-capsule">
          <svg class="timer-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" stroke="currentColor" stroke-width="2"/>
            <path d="M12 6v6l4 2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <path d="M6 2l3 3M18 2l-3 3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
          <span id="timer">00:00</span>
        </div>

        <div class="panel-card panel-card--compact">
          <button class="btn btn--secondary btn--fullwidth" id="btn-show-abacus">üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å</button>
        </div>
      </div>
    `;
    container.appendChild(layout);

    // === –ü–ª–∞–≤–∞—é—â–∏–π –∞–±–∞–∫—É—Å ===
    const oldAbacus = document.getElementById("abacus-wrapper");
    if (oldAbacus) {
      oldAbacus.remove();
      console.log("üóëÔ∏è –°—Ç–∞—Ä—ã–π –∞–±–∞–∫—É—Å —É–¥–∞–ª–µ–Ω");
    }

    const abacusWrapper = document.createElement("div");
    abacusWrapper.className = "abacus-wrapper";
    abacusWrapper.id = "abacus-wrapper";
    abacusWrapper.innerHTML = `
      <div class="abacus-header">
        <span class="abacus-title">üßÆ –ê–±–∞–∫—É—Å</span>
        <button class="abacus-close-btn" id="btn-close-abacus" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
      </div>
      <div id="floating-abacus-container"></div>
    `;
    document.body.appendChild(abacusWrapper);

    const exampleView = new ExampleView(document.getElementById("area-example"));
    const abacus = new Abacus(document.getElementById("floating-abacus-container"), { digitCount: abacusDigits });

    const shouldShowAbacus = st.mode === "abacus";
    if (shouldShowAbacus) {
      abacusWrapper.classList.add("visible");
      document.getElementById("btn-show-abacus").textContent = "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å";
    }

    // === –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===
    const session = {
      currentExample: null,
      stats: { correct: 0, incorrect: 0, total: getExampleCount(examplesCfg) },
      completed: 0
    };

    // –ü–æ–¥—Å—á—ë—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    function calculateFontSize(actions, maxDigits) {
      const baseSize = 120;
      const minSize = 35;
      const actionPenalty = 1.8;
      const digitPenalty = 3;
      let fontSize = baseSize - (actions * actionPenalty) - (maxDigits * digitPenalty);
      fontSize = Math.max(minSize, Math.min(baseSize, fontSize));
      return fontSize;
    }

    // === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ ===
    function showNextExample() {
      try {
        if (session.completed >= session.stats.total) {
          finishSession();
          return;
        }

        const selectedDigits =
          blockSimpleDigits.length > 0
            ? blockSimpleDigits.map(d => parseInt(d, 10))
            : [1, 2, 3, 4];

        session.currentExample = generateExample({
          blocks: { simple: { digits: selectedDigits } },
          actions: {
            min: actionsCfg.infinite ? 2 : (actionsCfg.count ?? 2),
            max: actionsCfg.infinite ? 5 : (actionsCfg.count ?? 2)
          }
        });

        if (!session.currentExample || !Array.isArray(session.currentExample.steps)) {
          throw new Error("–ü—É—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä (generateExample –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)");
        }

        exampleView.render(session.currentExample.steps, displayMode);

        // === –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ü–∏—Ñ—Ä ===
        const areaExample = document.getElementById("area-example");
        const actionsLen = session.currentExample.steps?.length || 1;

        let maxDigits = 1;
        for (const step of session.currentExample.steps) {
          const num = parseInt(String(step).replace(/[^\d-]/g, ""), 10);
          if (!isNaN(num)) {
            maxDigits = Math.max(maxDigits, Math.abs(num).toString().length);
          }
        }

        const fontSize = calculateFontSize(actionsLen, maxDigits);
        const root = document.documentElement;
        root.style.setProperty("--example-actions", actionsLen);
        root.style.setProperty("--example-digits", maxDigits);
        root.style.setProperty("--example-font-size", `${fontSize}px`);

        areaExample.setAttribute("data-actions", actionsLen);
        areaExample.setAttribute("data-digits", maxDigits);

        abacus.reset();
        const input = document.getElementById("answer-input");
        input.value = "";
        input.focus();
        startTimer("timer");

        console.log("üìù –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä. –û—Ç–≤–µ—Ç:", session.currentExample.answer);
      } catch (e) {
        showFatalError(e);
      }
    }

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
    function checkAnswer() {
      const input = document.getElementById("answer-input");
      const userAnswer = parseInt(input.value, 10);
      if (isNaN(userAnswer)) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ");
        return;
      }
      stopTimer();

      const isCorrect = userAnswer === session.currentExample.answer;
      if (isCorrect) session.stats.correct++;
      else session.stats.incorrect++;
      session.completed++;
      updateStats();
      playSound(isCorrect ? "correct" : "wrong");

      setTimeout(() => showNextExample(), 500);
    }

    // === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
    function updateStats() {
      const { correct, incorrect, total } = session.stats;
      const completed = session.completed;
      document.getElementById("stats-completed").textContent = completed;
      document.getElementById("stats-correct").textContent = correct;
      document.getElementById("stats-incorrect").textContent = incorrect;
      const percentCorrect = completed > 0 ? Math.round((correct / completed) * 100) : 0;
      const percentIncorrect = completed > 0 ? Math.round((incorrect / completed) * 100) : 0;
      document.getElementById("progress-correct").style.width = percentCorrect + "%";
      document.getElementById("progress-incorrect").style.width = percentIncorrect + "%";
      document.getElementById("percent-correct").textContent = percentCorrect + "%";
      document.getElementById("percent-incorrect").textContent = percentIncorrect + "%";
    }

    function finishSession() {
      abacusWrapper.classList.remove("visible");
      if (window.finishTraining) {
        window.finishTraining({
          correct: session.stats.correct,
          total: session.stats.total
        });
      }
    }

    // === –°–æ–±—ã—Ç–∏—è ===
    document.getElementById("btn-show-abacus").addEventListener("click", () => {
      abacusWrapper.classList.toggle("visible");
      const btn = document.getElementById("btn-show-abacus");
      btn.textContent = abacusWrapper.classList.contains("visible")
        ? "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å"
        : "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
    });
    document.getElementById("btn-close-abacus").addEventListener("click", () => {
      abacusWrapper.classList.remove("visible");
      document.getElementById("btn-show-abacus").textContent = "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
    });
    document.getElementById("btn-submit").addEventListener("click", checkAnswer);
    document.getElementById("answer-input").addEventListener("keypress", (e) => {
      if (e.key === "Enter") checkAnswer();
    });

    // === –°—Ç–∞—Ä—Ç ===
    showNextExample();
    console.log(`‚úÖ –¢—Ä–µ–Ω–∞–∂—ë—Ä –∑–∞–ø—É—â–µ–Ω (${abacusDigits} —Å—Ç–æ–µ–∫, ${digits}-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞)`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
    return () => {
      const wrapper = document.getElementById("abacus-wrapper");
      if (wrapper) wrapper.remove();
    };

  } catch (err) {
    showFatalError(err);
  }
}

/** –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä –Ω–µ —Å–º–æ–≥ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å */
function showFatalError(err) {
  console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞:", err);
  const host = document.querySelector(".screen__body") || document.body;
  host.insertAdjacentHTML(
    "afterbegin",
    `<div style="color:#d93025;padding:16px">
      <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä.</b><br/>${(err && err.message) ? err.message : String(err)}
    </div>`
  );
}

/** –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */
function getExampleCount(examplesCfg) {
  if (!examplesCfg) return 10;
  return examplesCfg.infinite ? 10 : (examplesCfg.count ?? 10);
}
