// ext/trainer_logic.js - –õ–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ü–∏—Ñ—Ä
import { ExampleView } from "./components/ExampleView.js";
import { Abacus } from "./components/AbacusNew.js";
import { generateExample } from "./core/generator.js";
import { startTimer, stopTimer } from "../js/utils/timer.js";
import { playSound } from "../js/utils/sound.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
 * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Object} context - { t, state }
 */
export function mountTrainerUI(container, { t, state }) {
  console.log("üéÆ –ú–æ–Ω—Ç–∏—Ä—É–µ–º UI —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ —Å –Ω–æ–≤—ã–º SVG –∞–±–∞–∫—É—Å–æ–º...");
  console.log("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", state.settings);

  const digits = parseInt(state.settings.digits, 10) || 1;
  const abacusDigits = digits + 1;
  const displayMode = state.settings.inline ? "inline" : "column";

  // === Layout ===
  const layout = document.createElement("div");
  layout.className = `mws-trainer mws-trainer--${displayMode}`;
  layout.innerHTML = `
    <div class="trainer-main trainer-main--${displayMode}">
      <div id="area-example" class="example-view"></div>
      <div class="answer-section">
        <div class="answer-label">–û—Ç–≤–µ—Ç:</div>
        <input type="number" id="answer-input" placeholder="" />
        <button class="btn btn--primary" id="btn-submit">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
      </div>
    </div>
    <div id="panel-controls">
      <div class="results-capsule-extended">
        <div class="results-capsule-extended__header">
          <span class="results-capsule-extended__label">–ü—Ä–∏–º–µ—Ä—ã:</span>
          <span class="results-capsule-extended__counter">
            <span id="stats-completed">0</span> /
            <span id="stats-total">${getExampleCount(state.settings)}</span>
          </span>
        </div>
        <div class="results-capsule">
          <div class="results-capsule__side results-capsule__side--correct">
            <div class="results-capsule__icon">‚úì</div>
            <div class="results-capsule__value" id="stats-correct">0</div>
          </div>
          <div class="results-capsule__divider"></div>
          <div class="results-capsule__side results-capsule__side--incorrect">
            <div class="results-capsule__icon">‚úó</div>
            <div class="results-capsule__value" id="stats-incorrect">0</div>
          </div>
        </div>
      </div>

      <div class="progress-container">
        <div class="progress-bar">
          <div class="progress-bar__correct" id="progress-correct" style="width: 0%;"></div>
          <div class="progress-bar__incorrect" id="progress-incorrect" style="width: 0%;"></div>
        </div>
        <div class="progress-label">
          <span class="progress-label__correct">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: <strong id="percent-correct">0%</strong></span>
          <span class="progress-label__incorrect">–û—à–∏–±–∫–∏: <strong id="percent-incorrect">0%</strong></span>
        </div>
      </div>

      <div class="timer-capsule">
        <svg class="timer-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" stroke="currentColor" stroke-width="2"/>
          <path d="M12 6v6l4 2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          <path d="M6 2l3 3M18 2l-3 3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
        <span id="timer">00:00</span>
      </div>

      <div class="panel-card panel-card--compact">
        <button class="btn btn--secondary btn--fullwidth" id="btn-show-abacus">üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å</button>
      </div>
    </div>
  `;
  container.appendChild(layout);

  // === –ü–ª–∞–≤–∞—é—â–∏–π –∞–±–∞–∫—É—Å ===
  const abacusWrapper = document.createElement("div");
  abacusWrapper.className = "abacus-wrapper";
  abacusWrapper.id = "abacus-wrapper";
  abacusWrapper.innerHTML = `
    <div class="abacus-header">
      <span class="abacus-title">üßÆ –ê–±–∞–∫—É—Å</span>
      <button class="abacus-close-btn" id="btn-close-abacus" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
    </div>
    <div id="floating-abacus-container"></div>
  `;
  document.body.appendChild(abacusWrapper);

  const exampleView = new ExampleView(document.getElementById("area-example"));
  const abacus = new Abacus(document.getElementById("floating-abacus-container"), { digitCount: abacusDigits });

  const shouldShowAbacus = state.settings.mode === "abacus";
  if (shouldShowAbacus) {
    abacusWrapper.classList.add("visible");
    document.getElementById("btn-show-abacus").textContent = "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å";
  }

  // === –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===
  const session = {
    currentExample: null,
    stats: { correct: 0, incorrect: 0, total: getExampleCount(state.settings) },
    completed: 0,
  };

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
   * @param {number} actions - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π (—Å—Ç—Ä–æ–∫)
   * @param {number} maxDigits - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤
   * @returns {number} - –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ px
   */
  function calculateFontSize(actions, maxDigits) {
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const baseSize = 120;           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è 1 –¥–µ–π—Å—Ç–≤–∏—è, 1 —Ä–∞–∑—Ä—è–¥–∞
    const minSize = 35;            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    const actionPenalty = 1.8;     // –®—Ç—Ä–∞—Ñ –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const digitPenalty = 3;        // –®—Ç—Ä–∞—Ñ –∑–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    let fontSize = baseSize - (actions * actionPenalty) - (maxDigits * digitPenalty);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    fontSize = Math.max(minSize, Math.min(baseSize, fontSize));
    
    console.log(`üìê –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: actions=${actions}, digits=${maxDigits} ‚Üí ${fontSize}px`);
    return fontSize;
  }

  // === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ ===
  function showNextExample() {
    if (session.completed >= session.stats.total) {
      finishSession();
      return;
    }

    session.currentExample = generateExample(state.settings);
    exampleView.render(session.currentExample.steps, displayMode);

    // === –ù–û–í–ê–Ø –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===
    const areaExample = document.getElementById("area-example");
    if (areaExample && session.currentExample) {
      const actions = session.currentExample.steps?.length || 1;
      
      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —á–∏—Å–µ–ª
      let maxDigits = 1;
      for (const step of session.currentExample.steps) {
        const num = parseInt(step.replace(/[^\d-]/g, ""), 10);
        if (!isNaN(num)) {
          maxDigits = Math.max(maxDigits, Math.abs(num).toString().length);
        }
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
      const fontSize = calculateFontSize(actions, maxDigits);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const root = document.documentElement;
      root.style.setProperty("--example-actions", actions);
      root.style.setProperty("--example-digits", maxDigits);
      root.style.setProperty("--example-font-size", `${fontSize}px`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      areaExample.setAttribute("data-actions", actions);
      areaExample.setAttribute("data-digits", maxDigits);
      
      console.log(`üé® –ê–¥–∞–ø—Ç–∞—Ü–∏—è: ${actions} –¥–µ–π—Å—Ç–≤–∏–π, ${maxDigits} —Ä–∞–∑—Ä—è–¥–æ–≤ ‚Üí ${fontSize}px`);
    }

    abacus.reset();
    const input = document.getElementById("answer-input");
    input.value = "";
    input.focus();
    startTimer("timer");
    console.log("üìù –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä. –û—Ç–≤–µ—Ç:", session.currentExample.answer);
  }

  // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
  function checkAnswer() {
    const input = document.getElementById("answer-input");
    const userAnswer = parseInt(input.value, 10);
    if (isNaN(userAnswer)) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ");
      return;
    }

    stopTimer();
    const isCorrect = userAnswer === session.currentExample.answer;
    if (isCorrect) session.stats.correct++;
    else session.stats.incorrect++;
    session.completed++;
    updateStats();
    playSound(isCorrect ? "correct" : "wrong");

    setTimeout(() => showNextExample(), 500);
  }

  // === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
  function updateStats() {
    const { correct, incorrect, total } = session.stats;
    const completed = session.completed;
    document.getElementById("stats-completed").textContent = completed;
    document.getElementById("stats-correct").textContent = correct;
    document.getElementById("stats-incorrect").textContent = incorrect;
    const percentCorrect = completed > 0 ? Math.round((correct / completed) * 100) : 0;
    const percentIncorrect = completed > 0 ? Math.round((incorrect / completed) * 100) : 0;
    document.getElementById("progress-correct").style.width = percentCorrect + "%";
    document.getElementById("progress-incorrect").style.width = percentIncorrect + "%";
    document.getElementById("percent-correct").textContent = percentCorrect + "%";
    document.getElementById("percent-incorrect").textContent = percentIncorrect + "%";
  }

  function finishSession() {
    abacusWrapper.classList.remove("visible");
    if (window.finishTraining) {
      window.finishTraining({
        correct: session.stats.correct,
        total: session.stats.total,
      });
    }
  }

  // === –°–æ–±—ã—Ç–∏—è ===
  document.getElementById("btn-show-abacus").addEventListener("click", () => {
    abacusWrapper.classList.toggle("visible");
    const btn = document.getElementById("btn-show-abacus");
    btn.textContent = abacusWrapper.classList.contains("visible")
      ? "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å"
      : "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
  });
  document.getElementById("btn-close-abacus").addEventListener("click", () => {
    abacusWrapper.classList.remove("visible");
    document.getElementById("btn-show-abacus").textContent = "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
  });
  document.getElementById("btn-submit").addEventListener("click", checkAnswer);
  document.getElementById("answer-input").addEventListener("keypress", (e) => {
    if (e.key === "Enter") checkAnswer();
  });

  // === –°—Ç–∞—Ä—Ç ===
  showNextExample();
  console.log(`‚úÖ –¢—Ä–µ–Ω–∞–∂—ë—Ä –∑–∞–ø—É—â–µ–Ω (${abacusDigits} —Å—Ç–æ–µ–∫, ${digits}-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞)`);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function getExampleCount(settings) {
  return settings.examples.infinite ? 10 : settings.examples.count;
}
