// ext/components/Abacus.js - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ä–æ–±–∞–Ω

/**
 * Abacus - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–∞–∫—É—Å–∞ (—Å–æ—Ä–æ–±–∞–Ω–∞)
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥–∞—è —Å—Ç–æ–π–∫–∞ –∏–º–µ–µ—Ç 1 –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É (Heaven, 5) –∏ 4 –Ω–∏–∂–Ω–∏–µ (Earth, 1+1+1+1)
 * –§–æ—Ä–º—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è: S = 5 * U + L, –≥–¥–µ U = –≤–µ—Ä—Ö–Ω—è—è (0 –∏–ª–∏ 1), L = –Ω–∏–∂–Ω–∏–µ (0-4)
 */
export class Abacus {
  /**
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {number} digits - –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–µ–∫ = digits + 1)
   */
  constructor(container, digits = 1) {
    this.container = container;
    this.digits = digits;
    this.columns = digits + 1; // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –Ω–∞ 1 –±–æ–ª—å—à–µ —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏!
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–π —Å—Ç–æ–π–∫–∏: { upper: 0|1, lower: 0-4 }
    this.state = Array.from({ length: this.columns }, () => ({
      upper: 0, // 0 = –≤–Ω–∏–∑—É (–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞), 1 = –≤–≤–µ—Ä—Ö—É (–∞–∫—Ç–∏–≤–Ω–∞)
      lower: 0  // 0-4 –±—É—Å–∏–Ω—ã —Å–Ω–∏–∑—É –∞–∫—Ç–∏–≤–Ω—ã
    }));
    
    this.render();
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–±–∞–∫—É—Å–∞
   */
  render() {
    this.container.innerHTML = '';
    this.container.className = 'abacus';
    
    // –°–æ–∑–¥–∞—ë–º —Å—Ç–æ–π–∫–∏
    for (let colIndex = 0; colIndex < this.columns; colIndex++) {
      const column = this.createColumn(colIndex);
      this.container.appendChild(column);
    }
    
    console.log(`üßÆ –ê–±–∞–∫—É—Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω: ${this.columns} —Å—Ç–æ–µ–∫ (—Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å ${this.digits})`);
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏
   * @param {number} colIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–π–∫–∏
   * @returns {HTMLElement}
   */
  createColumn(colIndex) {
    const col = document.createElement('div');
    col.className = 'abacus__column';
    col.dataset.col = colIndex;
    
    // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (Heaven bead)
    const upperSection = document.createElement('div');
    upperSection.className = 'abacus__upper';
    
    const upperBead = document.createElement('div');
    upperBead.className = 'bead bead--upper';
    upperBead.dataset.col = colIndex;
    upperBead.dataset.type = 'upper';
    upperBead.textContent = '5';
    
    if (this.state[colIndex].upper === 1) {
      upperBead.classList.add('bead--engaged');
    }
    
    upperBead.addEventListener('click', () => this.toggleUpper(colIndex));
    upperSection.appendChild(upperBead);
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (bar)
    const bar = document.createElement('div');
    bar.className = 'abacus__bar';
    
    // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å (Earth beads)
    const lowerSection = document.createElement('div');
    lowerSection.className = 'abacus__lower';
    
    for (let i = 0; i < 4; i++) {
      const lowerBead = document.createElement('div');
      lowerBead.className = 'bead bead--lower';
      lowerBead.dataset.col = colIndex;
      lowerBead.dataset.index = i;
      lowerBead.textContent = '1';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —ç—Ç–∞ –±—É—Å–∏–Ω–∞
      if (i < this.state[colIndex].lower) {
        lowerBead.classList.add('bead--engaged');
      }
      
      lowerBead.addEventListener('click', () => this.toggleLower(colIndex, i));
      lowerSection.appendChild(lowerBead);
    }
    
    col.append(upperSection, bar, lowerSection);
    return col;
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –±—É—Å–∏–Ω—ã
   * @param {number} colIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–π–∫–∏
   */
  toggleUpper(colIndex) {
    this.state[colIndex].upper = this.state[colIndex].upper === 0 ? 1 : 0;
    this.updateColumn(colIndex);
    console.log(`üßÆ –°—Ç–æ–π–∫–∞ ${colIndex}: –≤–µ—Ä—Ö–Ω—è—è = ${this.state[colIndex].upper}`);
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω
   * @param {number} colIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–π–∫–∏
   * @param {number} beadIndex - –ò–Ω–¥–µ–∫—Å –±—É—Å–∏–Ω—ã (0-3)
   */
  toggleLower(colIndex, beadIndex) {
    const current = this.state[colIndex].lower;
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—É—é –±—É—Å–∏–Ω—É -> —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –¥–æ –Ω–µ—ë
    if (beadIndex < current) {
      this.state[colIndex].lower = beadIndex;
    } else {
      // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é -> –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ –Ω–µ—ë –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
      this.state[colIndex].lower = beadIndex + 1;
    }
    
    this.updateColumn(colIndex);
    console.log(`üßÆ –°—Ç–æ–π–∫–∞ ${colIndex}: –Ω–∏–∂–Ω–∏–µ = ${this.state[colIndex].lower}`);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏
   * @param {number} colIndex
   */
  updateColumn(colIndex) {
    const column = this.container.querySelector(`.abacus__column[data-col="${colIndex}"]`);
    if (!column) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É
    const upperBead = column.querySelector('.bead--upper');
    if (this.state[colIndex].upper === 1) {
      upperBead.classList.add('bead--engaged');
    } else {
      upperBead.classList.remove('bead--engaged');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
    const lowerBeads = column.querySelectorAll('.bead--lower');
    lowerBeads.forEach((bead, index) => {
      if (index < this.state[colIndex].lower) {
        bead.classList.add('bead--engaged');
      } else {
        bead.classList.remove('bead--engaged');
      }
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–π–∫–∏ (S = 5*U + L)
   * @param {number} colIndex
   * @returns {number}
   */
  getColumnValue(colIndex) {
    const { upper, lower } = this.state[colIndex];
    return 5 * upper + lower;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ —Å –∞–±–∞–∫—É—Å–∞ (—á–∏—Ç–∞–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
   * @returns {number}
   */
  getValue() {
    let result = 0;
    for (let i = 0; i < this.columns; i++) {
      const power = this.columns - 1 - i; // –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑—Ä—è–¥–∞
      result += this.getColumnValue(i) * Math.pow(10, power);
    }
    return result;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∞–±–∞–∫—É—Å–µ
   * @param {number} value - –ß–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  setValue(value) {
    const digits = String(value).padStart(this.columns, '0').split('');
    
    digits.forEach((digit, index) => {
      const num = parseInt(digit, 10);
      
      // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ 5*U + L
      if (num >= 5) {
        this.state[index].upper = 1;
        this.state[index].lower = num - 5;
      } else {
        this.state[index].upper = 0;
        this.state[index].lower = num;
      }
      
      this.updateColumn(index);
    });
    
    console.log(`üßÆ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
  }
  
  /**
   * –°–±—Ä–æ—Å –∞–±–∞–∫—É—Å–∞ (–≤—Å–µ –±—É—Å–∏–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
   */
  reset() {
    this.state.forEach((col, index) => {
      col.upper = 0;
      col.lower = 0;
      this.updateColumn(index);
    });
    console.log('üßÆ –ê–±–∞–∫—É—Å —Å–±—Ä–æ—à–µ–Ω');
  }
}
