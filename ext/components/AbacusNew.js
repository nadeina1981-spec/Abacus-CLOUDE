// ext/components/AbacusNew.js - –ê–±–∞–∫—É—Å —Å –∫—Ä–∞—Å–∏–≤–æ–π SVG –≥—Ä–∞—Ñ–∏–∫–æ–π (–ò–°–ü–†–ê–í–õ–ï–ù–û)

/**
 * Abacus - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–∞–∫—É—Å–∞ (—Å–æ—Ä–æ–±–∞–Ω–∞) —Å SVG –≥—Ä–∞—Ñ–∏–∫–æ–π
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥–∞—è —Å—Ç–æ–π–∫–∞ –∏–º–µ–µ—Ç 1 –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É (Heaven, 5) –∏ 4 –Ω–∏–∂–Ω–∏–µ (Earth, 1+1+1+1)
 * –§–æ—Ä–º—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è: S = 5 * U + L, –≥–¥–µ U = –≤–µ—Ä—Ö–Ω—è—è (0 –∏–ª–∏ 1), L = –Ω–∏–∂–Ω–∏–µ (0-4)
 */
export class Abacus {
  /**
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {Object} options - –û–ø—Ü–∏–∏ { digitCount: number }
   */
  constructor(container, options = {}) {
    this.container = container;
    this.digitCount = options.digitCount || 2;
    this.columns = this.digitCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–µ–∫ = —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Å–∏–Ω: { heaven: 'up'|'down', earth: ['up'|'down', ...] }
    this.beads = {};
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    this.dragging = null;
    this.dragStartY = null;
    
    this.init();
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–±–∞–∫—É—Å–∞
   */
  init() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±—É—Å–∏–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    for (let col = 0; col < this.digitCount; col++) {
      this.beads[col] = {
        heaven: 'up', // –≤–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞ –≤–≤–µ—Ä—Ö—É (–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)
        earth: ['down', 'down', 'down', 'down'] // –Ω–∏–∂–Ω–∏–µ –≤–Ω–∏–∑—É (–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã)
      };
    }
    
    this.render();
    this.attachEventListeners();
    
    console.log(`üßÆ –ù–æ–≤—ã–π –∞–±–∞–∫—É—Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω: ${this.digitCount} —Å—Ç–æ–µ–∫`);
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–±–∞–∫—É—Å–∞
   */
  render() {
    const width = this.digitCount * 72 + 40;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è –æ–±—ë—Ä—Ç–∫–∞ abacus-wrapper
    this.container.innerHTML = `
      <svg id="abacus-svg" width="${width}" height="300" style="user-select: none;">
        ${this.renderDefs()}
        ${this.renderFrame()}
        ${this.renderRods()}
        ${this.renderMiddleBar()}
        ${this.renderBeads()}
      </svg>
    `;
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SVG (–≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—ã)
   */
  renderDefs() {
    return `
      <defs>
        <!-- –¢–µ–Ω—å –¥–ª—è –±—É—Å–∏–Ω -->
        <filter id="beadShadow" x="-50%" y="-50%" width="200%" height="200%">
          <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
          <feOffset dx="0" dy="3" result="offsetblur"/>
          <feComponentTransfer>
            <feFuncA type="linear" slope="0.6"/>
          </feComponentTransfer>
          <feMerge>
            <feMergeNode/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
        
        <!-- –¢–µ–Ω—å –¥–ª—è —Ä–∞–º–∫–∏ -->
        <filter id="frameShadow" x="-10%" y="-10%" width="120%" height="120%">
          <feGaussianBlur in="SourceAlpha" stdDeviation="4"/>
          <feOffset dx="0" dy="4" result="offsetblur"/>
          <feComponentTransfer>
            <feFuncA type="linear" slope="0.5"/>
          </feComponentTransfer>
          <feMerge>
            <feMergeNode/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
        
        <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–º–∫–∏ -->
        <linearGradient id="topFrameGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stop-color="#A0522D" stop-opacity="1" />
          <stop offset="50%" stop-color="#8B4513" stop-opacity="1" />
          <stop offset="100%" stop-color="#6B3410" stop-opacity="1" />
        </linearGradient>
        
        <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –ø–ª–∞–Ω–∫–∏ -->
        <linearGradient id="metalBarGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stop-color="#949494" stop-opacity="1" />
          <stop offset="30%" stop-color="#ababab" stop-opacity="1" />
          <stop offset="50%" stop-color="#757575" stop-opacity="1" />
          <stop offset="70%" stop-color="#8c8c8c" stop-opacity="1" />
          <stop offset="100%" stop-color="#606060" stop-opacity="1" />
        </linearGradient>
        
        <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –±—É—Å–∏–Ω -->
        <radialGradient id="beadGradient" cx="45%" cy="40%">
          <stop offset="0%" stop-color="#ffb366" stop-opacity="1" />
          <stop offset="50%" stop-color="#ff7c00" stop-opacity="1" />
          <stop offset="100%" stop-color="#cc6300" stop-opacity="1" />
        </radialGradient>
      </defs>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–∞–º–∫–∏ –∞–±–∞–∫—É—Å–∞
   */
  renderFrame() {
    const width = this.digitCount * 72 + 20;
    return `
      <!-- –í–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞ -->
      <rect x="10" y="10" width="${width}" height="30" fill="url(#topFrameGradient)" filter="url(#frameShadow)" rx="5"/>
      <rect x="15" y="13" width="${width - 10}" height="4" fill="rgba(255, 255, 255, 0.15)" rx="2"/>
      
      <!-- –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞ -->
      <rect x="10" y="264" width="${width}" height="30" fill="url(#topFrameGradient)" filter="url(#frameShadow)" rx="5"/>
      <rect x="15" y="267" width="${width - 10}" height="4" fill="rgba(255, 255, 255, 0.15)" rx="2"/>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–µ—Ä–∂–Ω–µ–π
   */
  renderRods() {
    let rods = '';
    for (let col = 0; col < this.digitCount; col++) {
      const x = 50 + col * 72;
      rods += `<line x1="${x}" y1="40" x2="${x}" y2="264" stroke="#654321" stroke-width="8"/>`;
    }
    return rods;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ä–µ–¥–Ω–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞–Ω–∫–∏
   */
  renderMiddleBar() {
    const width = this.digitCount * 72 + 20;
    return `
      <rect x="10" y="91" width="${width}" height="10" fill="url(#metalBarGradient)" rx="2"/>
      <rect x="15" y="92" width="${width - 10}" height="2" fill="rgba(255, 255, 255, 0.6)" rx="1"/>
      <rect x="10" y="101" width="${width}" height="2" fill="rgba(0, 0, 0, 0.3)" rx="1"/>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –±—É—Å–∏–Ω
   */
  renderBeads() {
    let beadsHTML = '';
    
    for (let col = 0; col < this.digitCount; col++) {
      const x = 50 + col * 72;
      const beadHeight = 36;
      const beadWidth = 32;
      const gapFromBar = 1;
      
      // –ù–µ–±–µ—Å–Ω–∞—è –±—É—Å–∏–Ω–∞ (–≤–µ—Ä—Ö–Ω—è—è)
      const heavenY = this.beads[col].heaven === 'down' 
        ? 91 - beadHeight/2 - gapFromBar // –∞–∫—Ç–∏–≤–Ω–∞ (—É –ø–ª–∞–Ω–∫–∏)
        : 40 + beadHeight/2 + gapFromBar; // –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (–≤–≤–µ—Ä—Ö—É)
      
      beadsHTML += this.renderBead(x, heavenY, beadWidth, beadHeight, col, 'heaven', 0);
      
      // –ó–µ–º–Ω—ã–µ –±—É—Å–∏–Ω—ã (–Ω–∏–∂–Ω–∏–µ)
      const earthActive = this.beads[col].earth;
      const upCount = earthActive.filter(p => p === 'up').length;
      const downCount = 4 - upCount;
      
      for (let index = 0; index < 4; index++) {
        let earthY;
        if (earthActive[index] === 'up') {
          // –ê–∫—Ç–∏–≤–Ω–∞—è –±—É—Å–∏–Ω–∞ (—É –ø–ª–∞–Ω–∫–∏ —Å–≤–µ—Ä—Ö—É)
          const activeIndex = earthActive.slice(0, index).filter(p => p === 'up').length;
          earthY = 101 + beadHeight/2 + gapFromBar + activeIndex * beadHeight;
        } else {
          // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –±—É—Å–∏–Ω–∞ (–≤–Ω–∏–∑—É)
          const inactiveIndex = earthActive.slice(0, index).filter(p => p === 'down').length;
          earthY = 264 - beadHeight/2 - gapFromBar - (downCount - 1 - inactiveIndex) * beadHeight;
        }
        
        beadsHTML += this.renderBead(x, earthY, beadWidth, beadHeight, col, 'earth', index);
      }
    }
    
    return beadsHTML;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –±—É—Å–∏–Ω—ã
   */
  renderBead(x, y, width, height, col, type, index) {
    const hw = width;
    const hh = height / 2;
    const cutSize = 12;
    const sideRoundness = 2;
    
    // SVG path –¥–ª—è —Ñ–æ—Ä–º—ã –±—É—Å–∏–Ω—ã (–≤–æ—Å—å–º–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏)
    const path = `
      M ${x - cutSize} ${y - hh}
      L ${x + cutSize} ${y - hh}
      Q ${x + cutSize + 2} ${y - hh + 2} ${x + hw - sideRoundness} ${y - sideRoundness}
      Q ${x + hw} ${y} ${x + hw - sideRoundness} ${y + sideRoundness}
      Q ${x + cutSize + 2} ${y + hh - 2} ${x + cutSize} ${y + hh}
      L ${x - cutSize} ${y + hh}
      Q ${x - cutSize - 2} ${y + hh - 2} ${x - hw + sideRoundness} ${y + sideRoundness}
      Q ${x - hw} ${y} ${x - hw + sideRoundness} ${y - sideRoundness}
      Q ${x - cutSize - 2} ${y - hh + 2} ${x - cutSize} ${y - hh}
      Z
    `;
    
    return `
      <g class="bead" data-col="${col}" data-type="${type}" data-index="${index}" style="cursor: grab;">
        <path d="${path}" fill="url(#beadGradient)" filter="url(#beadShadow)"/>
        <line x1="${x - width}" y1="${y}" x2="${x + width}" y2="${y}" stroke="rgba(0, 0, 0, 0.075)" stroke-width="2"/>
      </g>
    `;
  }
  
  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  attachEventListeners() {
    const svg = this.container.querySelector('#abacus-svg');
    if (!svg) return;
    
    // Mouse —Å–æ–±—ã—Ç–∏—è
    svg.addEventListener('mousedown', (e) => this.handleMouseDown(e));
    document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
    document.addEventListener('mouseup', () => this.handleMouseUp());
    
    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    svg.addEventListener('touchstart', (e) => {
      e.preventDefault();
      this.handleMouseDown(e.touches[0]);
    });
    document.addEventListener('touchmove', (e) => {
      if (this.dragging) e.preventDefault();
      this.handleMouseMove(e.touches[0]);
    });
    document.addEventListener('touchend', () => this.handleMouseUp());
  }
  
  /**
   * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  handleMouseDown(e) {
    const beadGroup = e.target.closest('.bead');
    if (!beadGroup) return;
    
    const col = parseInt(beadGroup.dataset.col);
    const type = beadGroup.dataset.type;
    const index = parseInt(beadGroup.dataset.index);
    
    const rect = this.container.querySelector('#abacus-svg').getBoundingClientRect();
    this.dragStartY = e.clientY - rect.top;
    this.dragging = { col, type, index };
    
    e.preventDefault();
  }
  
  /**
   * –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  handleMouseMove(e) {
    if (!this.dragging || this.dragStartY === null) return;
    
    const rect = this.container.querySelector('#abacus-svg').getBoundingClientRect();
    const y = e.clientY - rect.top;
    const deltaY = y - this.dragStartY;
    const threshold = 10; // –ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    
    if (this.dragging.type === 'heaven') {
      // –í–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞
      if (deltaY > threshold && this.beads[this.dragging.col].heaven !== 'down') {
        this.beads[this.dragging.col].heaven = 'down';
        this.render();
        this.attachEventListeners(); // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ—Å–ª–µ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
      } else if (deltaY < -threshold && this.beads[this.dragging.col].heaven !== 'up') {
        this.beads[this.dragging.col].heaven = 'up';
        this.render();
        this.attachEventListeners(); // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ—Å–ª–µ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
      }
    } else {
      // –ù–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
      const earthBeads = [...this.beads[this.dragging.col].earth];
      let changed = false;
      
      if (deltaY < -threshold) {
        // –¢—è–Ω–µ–º –í–í–ï–†–• - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ç—É –∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        for (let i = 0; i <= this.dragging.index; i++) {
          if (earthBeads[i] !== 'up') {
            earthBeads[i] = 'up';
            changed = true;
          }
        }
      } else if (deltaY > threshold) {
        // –¢—è–Ω–µ–º –í–ù–ò–ó - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ç—É –∏ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
        for (let i = this.dragging.index; i < 4; i++) {
          if (earthBeads[i] !== 'down') {
            earthBeads[i] = 'down';
            changed = true;
          }
        }
      }
      
      if (changed) {
        this.beads[this.dragging.col].earth = earthBeads;
        this.render();
        this.attachEventListeners(); // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ—Å–ª–µ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
      }
    }
    
    e.preventDefault();
  }
  
  /**
   * –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  handleMouseUp() {
    this.dragging = null;
    this.dragStartY = null;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∞–±–∞–∫—É—Å–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º API)
   * @returns {number}
   */
  getValue() {
    let total = 0;
    for (let col = 0; col < this.digitCount; col++) {
      const multiplier = Math.pow(10, this.digitCount - col - 1);
      let colValue = 0;
      
      // –ù–µ–±–µ—Å–Ω–∞—è –±—É—Å–∏–Ω–∞ = 5
      if (this.beads[col].heaven === 'down') {
        colValue += 5;
      }
      
      // –ó–µ–º–Ω—ã–µ –±—É—Å–∏–Ω—ã = 1 –∫–∞–∂–¥–∞—è
      this.beads[col].earth.forEach(position => {
        if (position === 'up') colValue += 1;
      });
      
      total += colValue * multiplier;
    }
    return total;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∞–±–∞–∫—É—Å–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º API)
   * @param {number} value - –ß–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  setValue(value) {
    const digits = String(value).padStart(this.digitCount, '0').split('');
    
    digits.forEach((digit, index) => {
      const num = parseInt(digit, 10);
      
      // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ 5*U + L
      if (num >= 5) {
        this.beads[index].heaven = 'down';
        const remainder = num - 5;
        this.beads[index].earth = [
          remainder >= 1 ? 'up' : 'down',
          remainder >= 2 ? 'up' : 'down',
          remainder >= 3 ? 'up' : 'down',
          remainder >= 4 ? 'up' : 'down'
        ];
      } else {
        this.beads[index].heaven = 'up';
        this.beads[index].earth = [
          num >= 1 ? 'up' : 'down',
          num >= 2 ? 'up' : 'down',
          num >= 3 ? 'up' : 'down',
          num >= 4 ? 'up' : 'down'
        ];
      }
    });
    
    this.render();
    this.attachEventListeners(); // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ—Å–ª–µ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
    console.log(`üßÆ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
  }
  
  /**
   * –°–±—Ä–æ—Å –∞–±–∞–∫—É—Å–∞ (–≤—Å–µ –±—É—Å–∏–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
   */
  reset() {
    for (let col = 0; col < this.digitCount; col++) {
      this.beads[col].heaven = 'up';
      this.beads[col].earth = ['down', 'down', 'down', 'down'];
    }
    this.render();
    this.attachEventListeners(); // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ—Å–ª–µ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞
    console.log('üßÆ –ê–±–∞–∫—É—Å —Å–±—Ä–æ—à–µ–Ω');
  }
  
  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   * @param {number} count - –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤
   */
  setDigitCount(count) {
    this.digitCount = count;
    this.columns = count;
    this.beads = {};
    this.init();
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ–π–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @param {number} colIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–π–∫–∏
   * @returns {number}
   */
  getColumnValue(colIndex) {
    if (!this.beads[colIndex]) return 0;
    
    let value = 0;
    if (this.beads[colIndex].heaven === 'down') {
      value += 5;
    }
    this.beads[colIndex].earth.forEach(pos => {
      if (pos === 'up') value += 1;
    });
    
    return value;
  }
}
