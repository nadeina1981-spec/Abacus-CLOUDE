// ext/core/rules/Simple5Rule.js - –ü—Ä–∞–≤–∏–ª–æ "–ü—Ä–æ—Å—Ç–æ 5" (0-5, –° –≤–µ—Ä—Ö–Ω–µ–π –∫–æ—Å—Ç–æ—á–∫–æ–π)

import { SimpleRule } from './SimpleRule.js';

/**
 * Simple5Rule - –ø—Ä–∞–≤–∏–ª–æ "–ü—Ä–æ—Å—Ç–æ 5"
 * –†–∞–±–æ—Ç–∞ —Å –Ω–∏–∂–Ω–∏–º–∏ –∫–æ—Å—Ç–æ—á–∫–∞–º–∏ (0-4) –ò –≤–µ—Ä—Ö–Ω–µ–π –∫–æ—Å—Ç–æ—á–∫–æ–π (5)
 * –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: 0-5
 * –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: 0-9 (–≤—Ä–µ–º–µ–Ω–Ω–æ)
 * 
 * –§–ò–ó–ò–ß–ï–°–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
 * - 4 –Ω–∏–∂–Ω–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏ (–∫–∞–∂–¥–∞—è = 1)
 * - 1 –≤–µ—Ä—Ö–Ω—è—è –∫–æ—Å—Ç–æ—á–∫–∞ (= 5)
 * - +5: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω—è—è –í–´–ö–õ–Æ–ß–ï–ù–ê (—Å–æ—Å—Ç–æ—è–Ω–∏–µ 0-4)
 * - -5: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω—è—è –í–ö–õ–Æ–ß–ï–ù–ê (—Å–æ—Å—Ç–æ—è–Ω–∏–µ 5-9)
 * - –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 6-9 –¥–æ–ª–∂–Ω—ã "–∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è" (–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ 0-5)
 * 
 * –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø:
 * - –•–æ—Ç—è –± –æ–¥–∏–Ω –∫—Ä–æ–∫ ¬±5 (—Ç—Ä–µ–Ω–∏—Ä—É–µ–º –ø—è—Ç—ë—Ä–∫—É!)
 * - –ú–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π –∫–æ—Å—Ç–æ—á–∫–∏
 * - –ù–ï —Å—Ç—Ä–æ–∏–º 5 –Ω–∏–∂–Ω–∏–º–∏ –∫–æ—Å—Ç–æ—á–∫–∞–º–∏ (3+2, 4+1 - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –ë—Ä–∞—Ç—å–µ–≤!)
 */
export class Simple5Rule extends SimpleRule {
  constructor(config = {}) {
    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º super –Ω–∞–ø—Ä—è–º—É—é, —Å–æ–∑–¥–∞—ë–º —Å–≤–æ—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const selectedDigits = config.selectedDigits || [1, 2, 3, 4, 5];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MAX (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞)
    const MAX = Math.max(...selectedDigits);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const positiveActions = selectedDigits.filter(d => d > 0 && d <= 5); // 1-5
    const negativeActions = positiveActions.map(d => -d);
    const allowedActions = [...positiveActions, ...negativeActions];
    
    // –í—ã–∑—ã–≤–∞–µ–º BaseRule –Ω–∞–ø—Ä—è–º—É—é
    super({
      minState: 0,
      maxState: MAX,              // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 0-MAX (–æ–±—ã—á–Ω–æ 0-5)
      intermediateMax: 9,         // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å 0-9
      minSteps: config.minSteps || 2,  // –ú–∏–Ω–∏–º—É–º 2 —à–∞–≥–∞ (—á—Ç–æ–±—ã –±—ã–ª ¬±5)
      maxSteps: config.maxSteps || 4,
      allowedActions: allowedActions,
      forbiddenActions: [],       // ¬±5 –†–ê–ó–†–ï–®–ï–ù–´!
      selectedDigits: selectedDigits,
      hasUpperBead: true,         // –í–µ—Ä—Ö–Ω—è—è –∫–æ—Å—Ç–æ—á–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!
      maxToggles: 2,              // –ú–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π
      ...config
    });
    
    this.name = "–ü—Ä–æ—Å—Ç–æ 5";
    this.description = "–†–∞–±–æ—Ç–∞ —Å –Ω–∏–∂–Ω–∏–º–∏ –∏ –≤–µ—Ä—Ö–Ω–µ–π –∫–æ—Å—Ç–æ—á–∫–æ–π (¬±5), —Ñ–∏–Ω–∞–ª 0-5";
    
    console.log(`üìã Simple5Rule: –≤—ã–±—Ä–∞–Ω–æ ${selectedDigits}, MAX=${MAX}, –¥–µ–π—Å—Ç–≤–∏—è: [${allowedActions}]`);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è "–ü—Ä–æ—Å—Ç–æ 5"
   * @param {Object} example - { start, steps: [{ action, fromState, toState }], answer }
   * @returns {Object} - { isValid, errors }
   */
  validateExample(example) {
    // –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const baseValidation = super.validateExample(example);
    const errors = [...baseValidation.errors];
    
    let toggleCount = 0;
    let has5Toggle = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ "–ü—Ä–æ—Å—Ç–æ 5"
    example.steps.forEach((step, index) => {
      // –°—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π –∫–æ—Å—Ç–æ—á–∫–∏
      if (step.action === 5 || step.action === -5) {
        toggleCount++;
        has5Toggle = true;
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –± –æ–¥–∏–Ω –∫—Ä–æ–∫ ¬±5
    if (!has5Toggle) {
      errors.push(`–í –ø—Ä–∏–º–µ—Ä–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –± –æ–¥–∏–Ω –∫—Ä–æ–∫ ¬±5 (—Ç—Ä–µ–Ω–∏—Ä—É–µ–º –ø—è—Ç—ë—Ä–∫—É!)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ –±—ñ–ª—å—à–µ maxToggles –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—å
    if (toggleCount > this.config.maxToggles) {
      errors.push(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω—å –≤–µ—Ä—Ö–Ω—å–æ—ó –∫–æ—Å—Ç–æ—á–∫–∏ ${toggleCount} > –º–∞–∫—Å–∏–º—É–º—É ${this.config.maxToggles}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –º–∞—î –±—É—Ç–∏ 0-5 (–Ω–µ 6-9!)
    if (example.answer > 5) {
      errors.push(`–§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω ${example.answer} > 5 (–Ω–µ –∑–∞–∫—Ä–∏–≤—Å—è!)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–ï —Å—Ç—Ä–æ—ó—Ç–∏ 5 –Ω–∏–∂–Ω—ñ–º–∏ –∫–æ—Å—Ç–æ—á–∫–∞–º–∏
    // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –º—ã –ø–æ–ø–∞–ª–∏ –≤ 5, —Ç–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ +5, –∞ –Ω–µ —á–µ—Ä–µ–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–∏–∂–Ω–∏—Ö
    let currentState = example.start;
    example.steps.forEach((step, index) => {
      const newState = currentState + step.action;
      
      // –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ 5 –ù–ï —á–µ—Ä–µ–∑ +5
      if (newState === 5 && step.action !== 5) {
        const upperWasActive = this.isUpperBeadActive(currentState);
        
        // –ï—Å–ª–∏ –≤–µ—Ä—Ö–Ω—è—è –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏ –º—ã –ø–æ–ø–∞–ª–∏ –≤ 5 –ù–ï —á–µ—Ä–µ–∑ +5
        if (!upperWasActive) {
          errors.push(`–®–∞–≥ ${index + 1}: –ø–æ–ø–∞–ª–∏ –≤ 5 —á–µ—Ä–µ–∑ ${step.action} (–Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å 5 –Ω–∏–∂–Ω–∏–º–∏!)`);
        }
      }
      
      currentState = newState;
    });
    
    return {
      isValid: errors.length === 0,
      errors: errors
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –Ω–∞–ª–∏—á–∏—è ¬±5
   * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
   */
  generateStepsCount() {
    // –î–ª—è "–ü—Ä–æ—Å—Ç–æ 5" –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —à–∞–≥–∞ (—á—Ç–æ–±—ã –±—ã–ª —Ö–æ—Ç—è –± –æ–¥–∏–Ω ¬±5)
    const { minSteps, maxSteps } = this.config;
    const steps = Math.floor(Math.random() * (maxSteps - minSteps + 1)) + minSteps;
    return Math.max(2, steps); // –ú–∏–Ω–∏–º—É–º 2 —à–∞–≥–∞
  }
}
