// ext/core/generator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { SimpleRule } from './rules/SimpleRule.js';
import { ExampleGenerator } from './ExampleGenerator.js';

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–æ–≤
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ state.settings
 * @returns {BaseRule} - –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∞–≤–∏–ª–∞
 */
function createRuleFromSettings(settings) {
  console.log('‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settings);
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞ "–ü—Ä–æ—Å—Ç–æ"
  const simpleBlock = settings.blocks?.simple || {};
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const config = {
    minSteps: settings.actions?.count || 1,
    maxSteps: settings.actions?.count || 3,
  };
  
  // –ï—Å–ª–∏ –≤ –±–ª–æ–∫–µ "–ü—Ä–æ—Å—Ç–æ" –≤—ã–±—Ä–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
  if (simpleBlock.digits && simpleBlock.digits.length > 0) {
    const allowedDigits = simpleBlock.digits.map(d => parseInt(d, 10));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const positiveActions = allowedDigits.filter(d => d > 0);
    const negativeActions = allowedDigits.map(d => -d).filter(d => d < 0);
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "—Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ"
    if (simpleBlock.onlyAddition) {
      config.allowedActions = positiveActions;
    } 
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "—Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ"
    else if (simpleBlock.onlySubtraction) {
      config.allowedActions = negativeActions;
    }
    // –ò–Ω–∞—á–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∏ —Å–ª–æ–∂–µ–Ω–∏–µ, –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ
    else {
      config.allowedActions = [...positiveActions, ...negativeActions];
    }
    
    console.log('üìã –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –±–ª–æ–∫–∞ "–ü—Ä–æ—Å—Ç–æ":', config.allowedActions);
  }
  
  // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–æ "–ü—Ä–æ—Å—Ç–æ"
  const rule = new SimpleRule(config);
  
  console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ:', rule.name, rule.config);
  return rule;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ state.settings
 * @returns {Object} –ü—Ä–∏–º–µ—Ä: { start: 0, steps: ['+2', '-1', '+1'], answer: 2 }
 */
export function generateExample(settings) {
  console.log('üé≤ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settings);
  
  // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const rule = createRuleFromSettings(settings);
  
  // –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  const generator = new ExampleGenerator(rule);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
  const example = generator.generate();
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
  const trainerExample = generator.toTrainerFormat(example);
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
  const validation = generator.validate(example);
  if (!validation.isValid) {
    console.error('‚ùå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä:', validation.errors);
    console.error('–ü—Ä–∏–º–µ—Ä:', trainerExample);
  } else {
    console.log('‚úÖ –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω:', trainerExample);
  }
  
  return trainerExample;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
 * @returns {Array<Object>}
 */
export function generateExamples(count, settings = null) {
  if (!settings) {
    console.warn('‚ö†Ô∏è generateExamples –≤—ã–∑–≤–∞–Ω –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const examples = [];
    for (let i = 0; i < count; i++) {
      examples.push(generateExample({ 
        actions: { count: 3 },
        blocks: { simple: { digits: ['1', '2', '3', '4'] } }
      }));
    }
    return examples;
  }

  const examples = [];
  for (let i = 0; i < count; i++) {
    examples.push(generateExample(settings));
  }
  
  console.log(`üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${examples.length} –ø—Ä–∏–º–µ—Ä–æ–≤`);
  return examples;
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// ============================================================================

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω min‚Äìmax –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} digits
 * @returns {{min: number, max: number}}
 */
function getDigitRange(digits) {
  if (digits <= 1) return { min: 1, max: 9 };
  const min = Math.pow(10, digits - 1);
  const max = Math.pow(10, digits) - 1;
  return { min, max };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
 */
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} value - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {number} digits - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (1-9)
 * @returns {boolean}
 */
function isValidResult(value, digits) {
  const { max } = getDigitRange(digits);
  return value >= 0 && value <= max;
}
