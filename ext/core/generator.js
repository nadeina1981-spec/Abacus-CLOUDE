// ext/core/generator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ state.settings
 * @returns {Object} –ü—Ä–∏–º–µ—Ä: { start, steps, answer }
 */
export function generateExample(settings) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const actionCount = settings.actions?.infinite ? 10 : settings.actions?.count || 10;
  const digits = parseInt(settings.digits, 10) || 1;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
  const { min, max } = getDigitRange(digits);

  const example = {
    start: 0,
    steps: [],
    answer: 0
  };

  let current = example.start;

  for (let i = 0; i < actionCount; i++) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const value = randomInt(min, max);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (+/-)
    const operation = getRandomOperation(settings);
    const delta = operation === '+' ? value : -value;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
    const next = current + delta;
    if (!isValidResult(next, digits)) {
      i--;
      continue;
    }

    example.steps.push(`${operation}${value}`);
    current = next;
  }

  example.answer = current;

  console.log(`üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–º–µ—Ä:`, example);
  return example;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω min‚Äìmax –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} digits
 * @returns {{min: number, max: number}}
 */
function getDigitRange(digits) {
  if (digits <= 1) return { min: 1, max: 9 };
  const min = Math.pow(10, digits - 1);
  const max = Math.pow(10, digits) - 1;
  return { min, max };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
 */
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–æ–≤
 * @param {Object} settings
 * @returns {string} '+' –∏–ª–∏ '-'
 */
function getRandomOperation(settings) {
  const blocks = settings.blocks || {};
  const hasOnlyAddition = Object.values(blocks).some(b => b.onlyAddition);
  const hasOnlySubtraction = Object.values(blocks).some(b => b.onlySubtraction);

  if (hasOnlyAddition && !hasOnlySubtraction) return '+';
  if (hasOnlySubtraction && !hasOnlyAddition) return '-';
  return Math.random() > 0.5 ? '+' : '-';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} value - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {number} digits - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (1-9)
 * @returns {boolean}
 */
function isValidResult(value, digits) {
  const { max } = getDigitRange(digits);
  return value >= 0 && value <= max;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
 * @returns {Array<Object>}
 */
export function generateExamples(count, settings = null) {
  const examples = [];

  if (!settings) {
    for (let i = 0; i < count; i++) {
      const delta = randomDelta();
      const sign = delta > 0 ? '+' : '';
      examples.push(`${sign}${delta}`);
    }
    return examples;
  }

  for (let i = 0; i < count; i++) {
    const example = generateExample(settings);
    examples.push(example);
  }

  return examples;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
 * @returns {number}
 */
function randomDelta() {
  const vals = [-4, -3, -2, -1, 1, 2, 3, 4];
  return vals[Math.floor(Math.random() * vals.length)];
}
