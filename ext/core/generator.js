// ext/core/generator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ state.settings
 * @returns {Object} –ü—Ä–∏–º–µ—Ä: { start, steps, answer }
 */
export function generateExample(settings) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const actionCount = settings.actions.infinite ? 10 : settings.actions.count;
  const digits = parseInt(settings.digits, 10) || 1;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏ (–∫–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
  const activeDigits = getActiveDigits(settings);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
  const example = {
    start: 0, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö
    steps: [],
    answer: 0
  };
  
  let current = example.start;
  
  for (let i = 0; i < actionCount; i++) {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ñ—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    const digit = activeDigits[Math.floor(Math.random() * activeDigits.length)];
    const value = parseInt(digit, 10);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (+/-)
    const operation = getRandomOperation(settings);
    const delta = operation === '+' ? value : -value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0-9)
    const next = current + delta;
    if (!isValidResult(next, digits)) {
      i--; // –ø–æ–≤—Ç–æ—Ä—è–µ–º —à–∞–≥
      continue;
    }
    
    example.steps.push(`${operation}${value}`);
    current = next;
  }
  
  example.answer = current;
  
  console.log(`üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–º–µ—Ä:`, example);
  return example;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–æ–≤
 * @param {Object} settings
 * @returns {Array<string>}
 */
function getActiveDigits(settings) {
  const allDigits = [];
  
  // –°–æ–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
  Object.keys(settings.blocks).forEach(blockKey => {
    const block = settings.blocks[blockKey];
    if (block.digits && block.digits.length > 0) {
      allDigits.push(...block.digits);
    }
  });
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ 1-4
  return allDigits.length > 0 ? allDigits : ['1', '2', '3', '4'];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–æ–≤
 * @param {Object} settings
 * @returns {string} '+' –∏–ª–∏ '-'
 */
function getRandomOperation(settings) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –±–ª–æ–∫–∞—Ö
  const blocks = settings.blocks;
  const hasOnlyAddition = Object.values(blocks).some(b => b.onlyAddition);
  const hasOnlySubtraction = Object.values(blocks).some(b => b.onlySubtraction);
  
  if (hasOnlyAddition && !hasOnlySubtraction) {
    return '+';
  }
  if (hasOnlySubtraction && !hasOnlyAddition) {
    return '-';
  }
  
  // –ò–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω–æ
  return Math.random() > 0.5 ? '+' : '-';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} value - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {number} digits - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (1-9)
 * @returns {boolean}
 */
function isValidResult(value, digits) {
  const max = Math.pow(10, digits) - 1; // –¥–ª—è 1 —Ä–∞–∑—Ä—è–¥–∞: 9, –¥–ª—è 2: 99, –∏ —Ç.–¥.
  return value >= 0 && value <= max;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
 * @returns {Array<Object>}
 */
export function generateExamples(count, settings = null) {
  const examples = [];
  
  // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  if (!settings) {
    for (let i = 0; i < count; i++) {
      const delta = randomDelta();
      const sign = delta > 0 ? '+' : '';
      examples.push(`${sign}${delta}`);
    }
    return examples;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  for (let i = 0; i < count; i++) {
    const example = generateExample(settings);
    examples.push(example);
  }
  
  return examples;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
 * @returns {number}
 */
function randomDelta() {
  const vals = [-4, -3, -2, -1, 1, 2, 3, 4];
  return vals[Math.floor(Math.random() * vals.length)];
}
