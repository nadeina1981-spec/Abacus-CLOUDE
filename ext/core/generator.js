// ext/core/generator.js - –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è trainer_logic.js

import { SimpleRule } from './rules/SimpleRule.js';
import { Simple5Rule } from './rules/Simple5Rule.js';
import { ExampleGenerator } from './ExampleGenerator.js';

// ============================================================================
// –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è trainer_logic.js)
// ============================================================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ trainer_logic.js
 * @returns {Object} - –ü—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ {start, steps, answer}
 */
export function generateExample(settings) {
  console.log('‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settings);
  
  // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const rule = createRuleFromSettings(settings);
  
  // –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  const generator = new ExampleGenerator(rule);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
  const example = generator.generate();
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç trainer
  return generator.toTrainerFormat(example);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ trainer_logic.js
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø—Ä–∏–º–µ—Ä–æ–≤
 */
export function generateExamples(settings, count) {
  console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} –ø—Ä–∏–º–µ—Ä–æ–≤...`);
  
  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
  if (settings.noRepeat) {
    console.log('üîÑ –†–µ–∂–∏–º "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π" –≤–∫–ª—é—á–µ–Ω');
    return generateUniqueExamples(settings, count);
  }
  
  // –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
  const examples = [];
  for (let i = 0; i < count; i++) {
    examples.push(generateExample(settings));
  }
  
  console.log(`üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${examples.length} –ø—Ä–∏–º–µ—Ä–æ–≤`);
  return examples;
}

// ============================================================================
// –í–ù–£–¢–†–ï–ù–ù–ò–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @private
 */
function createRuleFromSettings(settings) {
  const { blocks, steps, actions } = settings;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∞–≤–∏–ª–∞
  const config = {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–¥–µ–π—Å—Ç–≤–∏–π) –≤ –ø—Ä–∏–º–µ—Ä–µ
    minSteps: actions?.min || steps?.min || 2,
    maxSteps: actions?.max || steps?.max || 4
  };
  
  console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π: –æ—Ç ${config.minSteps} –¥–æ ${config.maxSteps}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –±–ª–æ–∫–∞ "–ü—Ä–æ—Å—Ç–æ"
  const selectedDigits = blocks?.simply?.selected || [1, 2, 3, 4];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
  const hasFive = selectedDigits.includes(5);
  
  if (hasFive) {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ü–∏—Ñ—Ä–∞ 5 ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º Simple5Rule
    console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ: Simple5Rule (—Ü–∏—Ñ—Ä—ã: ${selectedDigits.join(', ')})`);
    return new Simple5Rule(config);
  } else {
    // –ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞ 5 –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º SimpleRule
    console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ: SimpleRule (—Ü–∏—Ñ—Ä—ã: ${selectedDigits.join(', ')})`);
    return new SimpleRule(config);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
 * @private
 */
function generateUniqueExamples(settings, count) {
  const examples = [];
  const seen = new Set();
  const maxAttempts = count * 10; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
  
  let attempts = 0;
  while (examples.length < count && attempts < maxAttempts) {
    attempts++;
    
    const example = generateExample(settings);
    const key = exampleToKey(example);
    
    if (!seen.has(key)) {
      seen.add(key);
      examples.push(example);
    }
  }
  
  if (examples.length < count) {
    console.warn(`‚ö†Ô∏è –£–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ ${examples.length} –∏–∑ ${count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤`);
  }
  
  return examples;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–∏–º–µ—Ä –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @private
 */
function exampleToKey(example) {
  return `${example.start}|${example.steps.join('|')}|${example.answer}`;
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// ============================================================================

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω min‚Äìmax –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} digits
 * @returns {{min: number, max: number}}
 */
function getDigitRange(digits) {
  if (digits <= 1) return { min: 1, max: 9 };
  const min = Math.pow(10, digits - 1);
  const max = Math.pow(10, digits) - 1;
  return { min, max };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
 */
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
 * @param {number} value - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {number} digits - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (1-9)
 * @returns {boolean}
 */
function isValidResult(value, digits) {
  const { max } = getDigitRange(digits);
  return value >= 0 && value <= max;
}
