// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

/**
 * ExampleGenerator - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∞–±–∞–∫—É—Å–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ (Rule) –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä
   * @returns {Object} - { start, steps: [{ action, fromState, toState }], answer }
   */
  generate() {
    const startState = this.rule.generateStartState();
    const stepsCount = this.rule.generateStepsCount();
    
    const steps = [];
    let currentState = startState;
    let attempts = 0;
    const maxAttempts = 100; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: —Å—Ç–∞—Ä—Ç=${startState}, —à–∞–≥–æ–≤=${stepsCount}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É —à–∞–≥–æ–≤
    for (let i = 0; i < stepsCount; i++) {
      const isFirstAction = (i === 0);
      const availableActions = this.rule.getAvailableActions(currentState, isFirstAction);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      if (availableActions.length === 0) {
        console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —à–∞–≥–µ ${i + 1} (—Å–æ—Å—Ç–æ—è–Ω–∏–µ ${currentState})`);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞
        if (attempts < maxAttempts) {
          attempts++;
          i = -1; // –°–±—Ä–æ—Å —Ü–∏–∫–ª–∞
          currentState = startState;
          steps.length = 0;
          continue;
        } else {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ 100 –ø–æ–ø—ã—Ç–æ–∫');
          break;
        }
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      const action = availableActions[
        Math.floor(Math.random() * availableActions.length)
      ];
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const newState = this.rule.applyAction(currentState, action);
      
      steps.push({
        action: action,
        fromState: currentState,
        toState: newState
      });
      
      console.log(`  –®–∞–≥ ${i + 1}: ${currentState} ${action > 0 ? '+' : ''}${action} ‚Üí ${newState}`);
      
      currentState = newState;
    }
    
    const example = {
      start: startState,
      steps: steps,
      answer: currentState
    };
    
    console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:`, this.formatForDisplay(example));
    
    return example;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   * @returns {Array<Object>}
   */
  generateMultiple(count) {
    const examples = [];
    for (let i = 0; i < count; i++) {
      examples.push(this.generate());
    }
    return examples;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä
   * @returns {string}
   */
  formatForDisplay(example) {
    const actions = example.steps.map(step => 
      this.rule.formatAction(step.action)
    ).join(' ');
    
    return `${actions} = ${example.answer}`;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
   * @param {Object} example - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
   * @returns {Object} - { start: 0, steps: ['+2', '-1', '+1'], answer: 2 }
   */
  toTrainerFormat(example) {
    return {
      start: example.start,
      steps: example.steps.map(step => this.rule.formatAction(step.action)),
      answer: example.answer
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä
   * @returns {Object} - { isValid, errors }
   */
  validate(example) {
    if (typeof this.rule.validateExample === 'function') {
      return this.rule.validateExample(example);
    }
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = [];
    let currentState = example.start;

    if (!this.rule.isValidState(currentState)) {
      errors.push(`–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${currentState} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã`);
    }

    example.steps.forEach((step, index) => {
      if (!this.rule.isValidAction(currentState, step.action)) {
        errors.push(`–®–∞–≥ ${index + 1}: –¥–µ–π—Å—Ç–≤–∏–µ ${step.action} –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${currentState}`);
      }

      const newState = this.rule.applyAction(currentState, step.action);
      if (!this.rule.isValidState(newState)) {
        errors.push(`–®–∞–≥ ${index + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${newState} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã`);
      }

      currentState = newState;
    });

    if (example.answer !== currentState) {
      errors.push(`–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${example.answer} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞—Å—á—ë—Ç–Ω—ã–º ${currentState}`);
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    };
  }
}
