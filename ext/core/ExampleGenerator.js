// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

/**
 * ExampleGenerator - –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ (BaseRule, SimpleRule, Simple5Rule –∏ –¥—Ä.) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
 */
export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä
   * @returns {Object} - –ü—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ {start, steps, answer}
   */
  generate() {
    const maxAttempts = 100; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const example = this._generateAttempt();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }
        
        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  }

  /**
   * –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞
   * @private
   */
_generateAttempt() {
  const start = this.rule.generateStartState();
  const stepsCount = this.rule.generateStepsCount();
  
  console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: —Å—Ç–∞—Ä—Ç=${start}, —à–∞–≥–æ–≤=${stepsCount}`);
  
  const steps = [];
  let currentState = start;
  let has5Action = false; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ¬±5
  
  for (let i = 0; i < stepsCount; i++) {
    const isFirstAction = (i === 0);
    const isLastAction = (i === stepsCount - 1);
    let availableActions = this.rule.getAvailableActions(currentState, isFirstAction);
    
    if (availableActions.length === 0) {
      throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${currentState}`);
    }
    
    // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å 5 –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö –∏ –µ—ë –µ—â—ë –Ω–µ –±—ã–ª–æ - –ø–æ–≤—ã—à–∞–µ–º —à–∞–Ω—Å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    const hasFive = this.rule.config?.hasFive;
    if (hasFive && !has5Action && i >= Math.floor(stepsCount / 3)) {
      const actions5 = availableActions.filter(a => Math.abs(a) === 5);
      if (actions5.length > 0 && Math.random() < 0.4) { // 40% —à–∞–Ω—Å –≤–º–µ—Å—Ç–æ 80%
        availableActions = actions5;
      }
    }
    
    // ‚úÖ –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ –∏–∑–±–µ–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–π, –≤–µ–¥—É—â–∏—Ö –∫ 0 (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
    if (isLastAction && currentState <= 4) {
      const nonZeroActions = availableActions.filter(action => {
        const result = currentState + action;
        return result !== 0;
      });
      if (nonZeroActions.length > 0) {
        availableActions = nonZeroActions;
      }
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const action = availableActions[Math.floor(Math.random() * availableActions.length)];
    const newState = this.rule.applyAction(currentState, action);
    
    // –û—Ç–º–µ—á–∞–µ–º –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ¬±5
    if (Math.abs(action) === 5) {
      has5Action = true;
    }
    
    steps.push({
      action: action,
      fromState: currentState,
      toState: newState
    });
    
    currentState = newState;
  }
  
  return {
    start: start,
    steps: steps,
    answer: currentState
  };
}

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø—Ä–∏–º–µ—Ä–æ–≤
   */
  generateMultiple(count) {
    const examples = [];
    for (let i = 0; i < count; i++) {
      examples.push(this.generate());
    }
    return examples;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä {start, steps, answer}
   * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;
    
    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(' ');
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç = 0, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (start === 0) {
      return `${stepsStr} = ${answer}`;
    } else {
      return `${start} ${stepsStr} = ${answer}`;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä {start, steps, answer}
   * @returns {Object} - –ü—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ {start, steps: string[], answer}
   */
  toTrainerFormat(example) {
    return {
      start: example.start,
      steps: example.steps.map(step => this.rule.formatAction(step.action)),
      answer: example.answer
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns {boolean}
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true; // –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
  }
}
